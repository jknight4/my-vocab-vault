package xyz.knightj.my_vocab_vault.configimport org.springframework.beans.factory.annotation.Valueimport org.springframework.context.annotation.Beanimport org.springframework.context.annotation.Configurationimport org.springframework.context.annotation.Profileimport org.springframework.security.config.Customizerimport org.springframework.security.config.annotation.web.builders.HttpSecurityimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurityimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithmimport org.springframework.security.oauth2.jwt.JwtDecoderimport org.springframework.security.oauth2.jwt.NimbusJwtDecoderimport org.springframework.security.web.SecurityFilterChain@Configuration@EnableWebSecurityclass SecurityConfig {    @Value("\${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}")    private lateinit var jwkSetUri: String    @Bean    @Profile("!local")    fun filterChain(http: HttpSecurity): SecurityFilterChain {        return http            .authorizeHttpRequests {            auth -> auth.requestMatchers( "/api/word-management/ping").permitAll()            .anyRequest().authenticated()            }            .oauth2ResourceServer {                oauth2 -> oauth2.jwt(Customizer.withDefaults())            }            .build()    }    @Bean    @Profile("local")    fun localFilterChain(http: HttpSecurity): SecurityFilterChain {        return http            .headers { headers -> headers.frameOptions { options -> options.disable() } }            .authorizeHttpRequests {                    auth -> auth.anyRequest().permitAll()            }            .csrf { it.disable() }            .build()    }    @Bean    fun jwtDecoder(): JwtDecoder {        return NimbusJwtDecoder            .withJwkSetUri(jwkSetUri)            .jwsAlgorithm(SignatureAlgorithm.ES256)            .build();    }}