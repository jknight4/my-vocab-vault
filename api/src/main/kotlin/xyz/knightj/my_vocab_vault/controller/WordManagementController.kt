package xyz.knightj.my_vocab_vault.controllerimport org.springframework.http.HttpStatusimport org.springframework.http.ResponseEntityimport org.springframework.web.bind.annotation.*import xyz.knightj.my_vocab_vault.models.*import xyz.knightj.my_vocab_vault.service.WordManagementServiceimport xyz.knightj.my_vocab_vault.utils.UserUtils@RestController@RequestMapping("/api/word-management")@CrossOrigin(origins = ["http://localhost:5173"])class WordManagementController(private val wordManagementService: WordManagementService) {    @GetMapping("/words")    fun findAllWords(@RequestHeader headers: Map<String, String>): ResponseEntity<WordsResponseData> {        val userId: String = UserUtils.getCurrentUserId()        val retrievedWords: List<WordDetails> = wordManagementService.findAllWords(userId);        return ResponseEntity.ok().body(WordsResponseData(retrievedWords.count(), retrievedWords))    }    @GetMapping("/word/{word}")    fun findWord(@RequestHeader headers: Map<String, String>, @PathVariable("word") wordName: String): ResponseEntity<WordDetails> {        val userId: String = UserUtils.getCurrentUserId()        val retrievedWords: WordDetails = wordManagementService.findWord(userId, wordName)            ?: return ResponseEntity.noContent().build()        return ResponseEntity.ok().body(retrievedWords)    }    @PostMapping("/word")    fun saveWord(@RequestHeader headers: Map<String, String>, @RequestBody wordData: WordRequestData): ResponseEntity<Void> {        val userId: String = UserUtils.getCurrentUserId()        wordManagementService.saveWord(userId, wordData)        return ResponseEntity.status(HttpStatus.CREATED).build()    }    @DeleteMapping("/word/{word}")    fun deleteWord(@RequestHeader headers: Map<String, String>, @PathVariable("word") wordName: String): ResponseEntity<Void> {        val userId: String = UserUtils.getCurrentUserId()        wordManagementService.deleteWord(userId, wordName)        return ResponseEntity.noContent().build()    }//    @PutMapping("/word/{word}")//    fun updateWord(@RequestHeader headers: Map<String, String>,//                   @PathVariable("word") wordName: String,//                   @RequestBody updatedWordData: UpdateWordRequestData)//    : ResponseEntity<WordDetails> {////        val userId: String = UserUtils.getCurrentUserId()////        val updatedWord: WordDetails = wordManagementService.updateWord(userId, wordName, updatedWordData)////        return ResponseEntity.ok().body(updatedWord)//    }    @GetMapping("/ping")    fun ping(): ResponseEntity<String> {        return ResponseEntity.ok().body("UP")    }}