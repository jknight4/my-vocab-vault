package xyz.knightj.my_vocab_vault.persistence////import io.awspring.cloud.dynamodb.DynamoDbTemplateimport org.springframework.stereotype.Componentimport xyz.knightj.my_vocab_vault.models.*import java.time.Instantimport java.util.UUID@Componentclass WordManagementClient(private val wordRepository: WordRepository, private val meaningRepository: MeaningRepository) {    fun saveWord(userId: String, word: WordRequestData) {        val wordId = UUID.randomUUID().toString();        wordRepository.save(Word(id = wordId,            userId = userId, wordName = word.word,            createdAt = Instant.now().toString(), updatedAt = Instant.now().toString()))        meaningRepository.save(Meaning(id = UUID.randomUUID().toString(),            wordId = wordId, partsOfSpeech = word.partsOfSpeech, definition = word.definition, examples = word.examples,            createdAt = Instant.now().toString(), updatedAt = Instant.now().toString())        )    }    fun findAllWords(userId: String): List<WordDetails> {        val words : List<Word> = getAllWordsByUserId(userId)        return words.map {            word ->            val meanings: List<Meaning> = getAllMeaningsByWordId(word.id)            WordDetails(                word = word.wordName,                meanings = meanings.convertToDetails())        }    }    fun findByWord(userId: String, wordName: String): List<WordDetails> {        val words: List<Word> = wordRepository.findByUserIdAndWordName(userId, wordName)        return words.map {                word ->            val meanings: List<Meaning> = getAllMeaningsByWordId(word.id)            WordDetails(                word = word.wordName,                meanings = meanings.convertToDetails())        }    }    private fun getAllWordsByUserId(userId: String): List<Word> {        return wordRepository.findByUserId(userId)    }//    private fun getAllMeaningsByUserId(userId: String): List<Meaning>{//        return meaningRepository.findByUserId(userId)//    }    private fun getAllMeaningsByWordId(wordId: String): List<Meaning>{        return meaningRepository.findByWordId(wordId)    }}fun List<Meaning>.convertToDetails(): MutableList<MeaningDetails>{    return this.map { entity -> MeaningDetails(        id = entity.id,        partsOfSpeech = PartsOfSpeech.valueOf(entity.partsOfSpeech),        definition = entity.definition,        examples = entity.examples    )    }.toMutableList()}